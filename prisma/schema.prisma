// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?   
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole @default(User)
    accounts      Account[]
    sessions      Session[]
    cardCollection  CardOwnedByUser[]
    pokeCoins     Int       @default(0)
    cardsUpForSale MarketPlaceItem[]
    notifications MarketNotification[]
}

enum UserRole {
    Admin
    User
}

model CardOwnedByUser {
    id            String    @id @default(cuid())
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    pokemonCard   PokemonCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
    cardId        Int
    createdAt     DateTime @default(now())
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PokemonCard {
    id              Int      @id @default(autoincrement())
    name            String
    rarity          Rarity
    image           String
    sellValue       Int
    owner           CardOwnedByUser[]
    seller          MarketPlaceItem[]
    notifications   MarketNotification[]
}

enum Rarity {
    common          //C
    uncommon        //UC
    rare            //R
    doubleRare      //RR
    superRare       //SR
    artRare         //AR
    secretArtRare   //SAR
    ultraRare       //UR goldcards
}

model MarketPlaceItem {
    id            String    @id @default(cuid())
    seller        User      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
    sellerId      String
    pokemonCard   PokemonCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
    cardId        Int
    cost          Int    @default(1)

    createdAt     DateTime @default(now())
}

model MarketNotification {
    id              String    @id @default(cuid())
    sellingUser     User      @relation(fields: [sellingUserId], references: [id], onDelete: Cascade)
    sellingUserId   String
    card            PokemonCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
    cardId          Int
    cost            Int
    read            Boolean  @default(false)

    createdAt     DateTime @default(now())
}

model ShopItem {
    id              String    @id @default(cuid())
    name            String
    cost            Int       @default(200)

    createdAt       DateTime @default(now())
}

model Games {
    id              String    @id @default(cuid())
    name            String
    winValue        Int       @default(5)

    createdAt       DateTime @default(now())
}